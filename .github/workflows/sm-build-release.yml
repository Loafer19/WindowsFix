name: SM Build and Release

on:
  push:
    branches:
      - main

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Check version change
        id: check
        run: |
          if [ -f SM/package.json ]; then
            current_version=$(jq -r '.version' SM/package.json)
            previous_version=$(git show HEAD~1:SM/package.json | jq -r '.version' || echo "")
            if [ "$current_version" != "$previous_version" ]; then
              echo "changed=true" >> $GITHUB_OUTPUT
              echo "version=$current_version" >> $GITHUB_OUTPUT
            else
              echo "changed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    strategy:
      matrix:
        include:
          - platform: 'windows-latest'
            args: ''
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: 'stable'

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: 'SM/src-tauri -> target'

      - name: Build TUI
        run: cd Scripts/tui && go build -o ../../WindowsFix-TUI.exe .

      - name: Install frontend dependencies
        run: cd SM && bun install

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: SM
          args: --bundles nsis

      - name: Rename portable executable
        run: |
          copy SM\src-tauri\target\release\services-manager.exe SM\src-tauri\target\release\ServicesManager_${{ needs.check-version.outputs.version }}-portable.exe
        shell: cmd

      - name: Upload setup artifact
        uses: actions/upload-artifact@v4
        with:
          name: setup-${{ matrix.platform }}
          path: SM/src-tauri/target/release/bundle/nsis/*.exe

      - name: Upload portable artifact
        uses: actions/upload-artifact@v4
        with:
          name: portable-${{ matrix.platform }}
          path: SM/src-tauri/target/release/ServicesManager_${{ needs.check-version.outputs.version }}-portable.exe

      - name: Upload TUI artifact
        uses: actions/upload-artifact@v4
        with:
          name: tui-${{ matrix.platform }}
          path: WindowsFix-TUI_${{ needs.check-version.outputs.version }}.exe

  release:
    needs: [check-version, build]
    if: needs.check-version.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          name: Version ${{ needs.check-version.outputs.version }}
          draft: false
          prerelease: false
          files: artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
